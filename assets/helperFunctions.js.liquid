//<script>

window.location.host === 'ivy-oak-de.myshopify.com' ? console.log('DEBUG CONSOLE ONLINE') : null
//console.log in debug mode in DEV
const debugConsole = (text = 'DEFAULT TXT',variable = '') => {
	return window.location.host === 'ivy-oak-de.myshopify.com' ? console.log(`${text} ${variable.length > 0 ? '==>' : ''}`,variable) : null
}

const errorConsole = (text = 'DEFAULT ERROR TXT',variable = '') => {
	return window.location.host === 'ivy-oak-de.myshopify.com' ? console.error(`${text} ${variable.length > 0 ? '==>' : ''}`,variable) : null
}

{% comment %} 'JQuery Example' {% endcomment %}
/* 
$.when(HTMLObject)
	.then(() => {

	})
	.catch( error => {
		notFoundVariables('WHERE', error)
	})
*/
{% comment %} 'VanillaJS Example' {% endcomment %}
/* 
try {}
catch(error){
	notFoundVariables('WHERE', error)
}
*/

{% comment %} 'IN CASE OF A JS ERROR' {% endcomment %}
const notFoundVariables = (where, error) => {
	//To us
	debugConsole(`JS ERROR: WHERE:${where}, URL: ${window.location.href}, ${error}`)
		//To fullStory or Our DB
	if(!window.location.origin.includes('ivy-oak-de')){
		//FS.log('error',`JS ERROR: WHERE:${where}, URL: ${window.location.href}, ${error}`)
		//Sending JS Errors to our DB Error Handler
		/*
		JS ERROR:
		WHERE:eshop.eeProducDetail MOBILE,
		URL: https://ivy-oak.com/products/jumpsuit-v-neck-bottle-green-i112518f524-g04?variant=14646318530675&utm_medium=paidsocial&utm_source=facebook&utm_campaign=I-COUNTRY_NL_FUNNEL_INITIAL_CREATIVE_DPA_OBJECTIVE_BUY_LAUNCH_NOVEMBER,
		ReferenceError: Can't find variable: dataLayer
		*/
		/*Expected Payload
			host, 	URL
      action, WHERE
			data	ERROR
		*/
		const data = {
			host: window.location.href,
			action: where,
			data: error
		};

		$.ajax({
			url: "https://monitoring.ivy-oak.com/log-error",
			type: "POST",
			data: JSON.stringify(data),
			dataType: 'json',
			contentType: 'application/json',
		});
	}
}
{% comment %} 'Jonathan Snook - MIT License - https://github.com/snookca/prepareTransition' {% endcomment %}
!function(n){n.fn.prepareTransition=function(){return this.each(function(){var i=n(this);i.one("TransitionEnd webkitTransitionEnd transitionend oTransitionEnd",function(){i.removeClass("is-transitioning")});var t=["transition-duration","-moz-transition-duration","-webkit-transition-duration","-o-transition-duration"],o=0;n.each(t,function(n,t){o||(o=parseFloat(i.css(t)))}),0!=o&&(i.addClass("is-transitioning"),i[0].offsetWidth)})}}(jQuery);

{% comment %} 'lets not get too hard on the CPU while scrolling :)' {% endcomment %}
const debounce = (func, wait, immediate) => {
	var timeout;
	return function() {
		var context = this, args = arguments;
		var later = function() {
			timeout = null;
			if (!immediate) func.apply(context, args);
		};
		var callNow = immediate && !timeout;
		clearTimeout(timeout);
		timeout = setTimeout(later, wait);
		if (callNow) func.apply(context, args);
	};
};

/* START OAKIFY-198 GTM HELPERS Implement Data Layer for LeRoi GA */
//main function to pass al the info to be sent
const sendInfoToDataLayer = (action, result, category = 'account', interaction = false) => {
	try {
		dataLayer.push({
			'eventCategory': category,
			'eventAction': action,
			'eventLabel': result,
			'eventValue': '',
			'eventNonInteraction': interaction,
			'event': 'gtmEvent'
		});
	}
	catch(error){
		notFoundVariables('sendInfoToDataLayer', error)
	}
}
//ToDO common function for all 'const sendDataLayerEnhanced'
/*
dataLayer.push({
	'event': 'eeProductDetail',
	'ecommerce': {
		'detail': {
			'products': [{
				'name': productHeader[1].outerText.toLowerCase(),       // Name or ID is required.
				'id': skuNumber,  // Config SKU
				'price': price,
				'brand': 'Ivy and Oak',
				'category': category,
				'metric1': metric1,
				'dimension1': dimension1,
			}]
		}
	}
});
*/

// Determine if an element is in the visible viewport
const isInViewport = element => {
	try {
		const gdprBarON = $('.GDPRBar') ? true : false;
		var rect = element.getBoundingClientRect();
		var html = document.documentElement;
		return (
			rect.top >= 0 &&
			rect.left >= 0 &&
			rect.bottom <= (window.innerHeight || gdprBarON ? html.clientHeight + 45 : html.clientHeight) &&
			rect.right <= (window.innerWidth || html.clientWidth)
		);
	}
	catch(error){
		notFoundVariables('isInViewport', error)
	}
}

//Currency symbol LOGIC
const currencySelector = symbol => {
	if(!symbol){ return }
	try {
		symbol = symbol.toLowerCase();
		if(symbol.includes('€')){
			currencyCode = 'EUR'
		} else if (symbol.includes('kr')){
			currencyCode = 'SEK'
		} else {
			currencyCode = 'DKK'
		}
		return currencyCode;
	}
	catch(error){
		notFoundVariables('currencySelector', error)
	}
}

const transformCurencyDisplay = (currencyCode, normalPrice, discountPrice) => {
	/*
	EUR => €10.000 ===> 10000
	SEK => 103,122.00 KR ==> 103122.00
	DKK => 74.599,00 ==> 74599.00
	*/
	try {
		switch (currencyCode) {
		case 'DKK':
			discountPrice = discountPrice ? discountPrice.split('.').join('').split(',').join('.') : false
			normalPrice = normalPrice.split('.').join('').split(',').join('.')
			break;
		case 'SEK':
			discountPrice = discountPrice ? discountPrice.slice(0,-3).split(',').join('') : false
			normalPrice = normalPrice.slice(0,-3).split(',').join('')
			break;
		default:
			//check if price contain a '.'
			normalPrice.includes('.') ?
			normalPrice = normalPrice.substring(1).split('.').join('').split(',').join('.') :
			normalPrice = normalPrice.substring(1).split(',').join('.')
			if(discountPrice){
				discountPrice.includes('.') ?
				discountPrice = discountPrice.substring(1).split('.').join('').split(',').join('.') :
				discountPrice = discountPrice.substring(1).split(',').join('.')
			} else {
				discountPrice = false
			}
		}

		return toReturn = { normalPrice, discountPrice }
	}
	catch(error){
		notFoundVariables('transformCurencyDisplay', error)
	}
}

//Country Currency logic
const countryPriceLogic = (price, currencyCode = false, sendCurrencyCode = false) => {
	try {
		if(!price){ return ''}
		if(!currencyCode){
			currencyCode = currencySelector(price)
		}
		/*
		EUR => €10.000 ===> 10000
		SEK => 103,122.00 KR ==> 103122.00
		*/
		let isDiscount;
		price.includes('-') ? isDiscount = true : isDiscount = false 
		switch (currencyCode) {
			case 'SEK':
				price = isDiscount ? `-${price.substr(2).slice(0,-3).split(',').join('')}` : price.slice(0,-3).split(',').join('')
				break;
			default:
			//check if price contain a '.'
			if(price.includes('.')){
				price = isDiscount ? `-${price.substr(3).split('.').join('').split(',').join('.')}` : price.substr(1).split('.').join('').split(',').join('.')
			} else {
				price = isDiscount ? `-${price.substr(3).split('.').join('').split(',').join('.')}` : price.substr(1).split('.').join('').split(',').join('.')
			}
		}
		price = parseFloat(price)
		if(sendCurrencyCode){
			return toReturn = {price,currencyCode}
		} else {
			return price
		}
	}
	catch(error){
		notFoundVariables('countryPriceLogic', error)
	}
}

const discountLogic = (discountPrice, normalPrice) => {
	try {
		if(!discountPrice){ return discount = '' }
		discount = (100 - ((discountPrice * 100)/normalPrice)).toFixed(2)
		if(discount === '0.00'){
			discount = ''
		} else if(discount < 10){
			discount = '0-10'
		} else if(discount >= 10 && discount < 20){
			discount = '10-20'
		} else if(discount >= 20 && discount < 30){
			discount = '20-30'
		} else if(discount >= 30 && discount < 50){
			discount = '30-50'
		} else if(discount >= 50){
			discount = '>50'
		}
		return discount;
	}
	catch(error){
		notFoundVariables('discountLogic', error)
	}
}

//discount logic
const discountCountyLogic = (normalPrice,discountPrice) => {
	try {
		if(normalPrice === 0){
			return toReturn = {normalPrice}
		}
		const currencyCode = currencySelector(normalPrice)
		const transformedPrices = transformCurencyDisplay(currencyCode, normalPrice, discountPrice)
		normalPrice = transformedPrices.normalPrice
		discountPrice = transformedPrices.discountPrice
		//discount price logic
		let discount = false
		discountPrice ? discount = discountLogic(discountPrice, normalPrice) : null
		return toReturn = {normalPrice,discountPrice,discount,currencyCode}
	}
	catch(error){
		notFoundVariables('discountCountyLogic', error)
	}
}
//END OAKIFY-198 GTM HELPERS

Array.prototype.flexFilter = function(info) {
	try {
		// Set our variables
		var matchesFilter, matches = [], count = 0;

		/***********
		Helper function to loop through the filter criteria to find
		matching values.
		Each filter criteria is treated as "AND". So each item must
		match all the filter criteria to be considered a match.
		Multiple filter values in a filter field are treated as "OR"
		i.e. ["Blue", "Green"] will yield items matching a value
		of Blue OR Green.
		************/
		matchesFilter = function(item) {
			try {
				count =0;
				for (var n = 0; n < info.length; n++) {
					var filterHit = false;
					item.tags[info[n]["Field"]] && item.tags[info[n]["Field"]].forEach( function(element, index) {
				if (info[n]["Values"].indexOf(element) > -1) {
					filterHit = true;
						}
					});
					if(filterHit){
						count++;
					}
				}
				// If TRUE, then the current item in the array meets
				// all the filter criteria
				return count == info.length;
			}
			catch(error){
				notFoundVariables('matchesFilter', error)
			}
		}

		// Loop through each item in the array
		for (var i = 0; i < this.length; i++) {
			// Determine if the current item matches the filter criteria
			if (matchesFilter(this[i])) {
				matches.push(this[i]);
			}
		}
		// Give us a new array containing the objects matching the filter criteria
		return matches;
	}
	catch(error){
		notFoundVariables('Array.prototype.flexFilter', error)
	}
}

const unique = (value, index, self) => {
    return self.indexOf(value) === index;
}

const rebuildDataNumbers = (number,notnotCreateDotInPrice = false) => {
	try {
		let fixedNum;
		if(notnotCreateDotInPrice){
			fixedNum = parseFloat(number)	
		} else {
			number = `${number}`
			number = number.split('')
			const frontNumber = number.slice(0, -2).join('')
			const backNumber = number.slice(-2).join('')
			fixedNum = parseFloat(`${frontNumber}.${backNumber}`)
		}
		return fixedNum
	}
	catch(error){
		notFoundVariables('rebuildDataNumbers', error)
	}
}

{% comment %} 'INITIALIZER (globaly available) FOR HELPER FUNCTIONS' {% endcomment %}
// CONSOLE.LOG IN DEV MODE
window.debugConsole = debugConsole;
// ERROR HANDLER OAKIFY-233.1
window.notFoundVariables = notFoundVariables;
// DEBOUNCER FUNCTION
window.debounce = debounce;
// INFO TO GTM(dataLayer)
window.sendInfoToDataLayer = sendInfoToDataLayer;
// CHECK IF IS IN VIEW PORT
window.isInViewport = isInViewport;
// DINAMICALLY SELECT A CURRENCY
window.currencySelector = currencySelector;
// TRANSFORM CURRENCY INTO JS UNDERSTANDABLE CODE
window.transformCurencyDisplay = transformCurencyDisplay;
// TRANSFORM COUNTRY CURENCIES INTO JS UNDESTANDABLE CODE
window.countryPriceLogic = countryPriceLogic;
// CALCULATE DISCOUNTS
window.discountLogic = discountLogic;
window.discountCountyLogic = discountCountyLogic;
// RETURN ONLY UNIQUE VALUES
window.unique = unique;
// TRANSFORM NUMBERS WITHOUT COMA INTO COMA NUMBERS 12345 => 123.45
window.rebuildDataNumbers = rebuildDataNumbers;